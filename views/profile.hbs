<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Profile Page</title>
    <link rel="stylesheet" href="/profile.css">
     <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    
</head>
<body>
   
	<!-- SIDEBAR -->
	<section id="sidebar">
        <div class="prof">
                <img id="image" src="../img/avatar.png" alt="Avatar" height="100px"/>      
                <h2 id="name">{{ userProfile.name }}</h2>
                <h3>{{ userProfile.email }}</span></h3>
        </div>
            
		<ul class="side-menu top">
            <li class="active">
				<a href="/profile">
					<i class='bx bxs-dashboard' ></i>
					<span class="text">Profile</span>
				</a>
			</li>
			<li>
				<a href="/">
					<i class='bx bxs-dashboard' ></i>
					<span class="text">Home</span>
				</a>
			</li>
            <li>
				<a href="/lesson">
					<i class='bx bxs-message-dots' ></i>
					<span class="text">Lessons</span>
				</a>
			</li>
			<li>
				<a href="/contact">
					<i class='bx bxs-message-dots' ></i>
					<span class="text">Feedback</span>
				</a>
			</li>
		</ul>
		<ul class="side-menu">
			<li>
				<a href="#" class="logout">
					<i class='bx bxs-log-out-circle' ></i>
					<span onclick="logout()" class="text">Logout</span>
				</a>
			</li>
		</ul>
	</section>
	<!-- SIDEBAR -->



	<!-- CONTENT -->
	<section id="content">
		<!-- NAVBAR -->
		<nav>
			<form action="/profile">
				<div class="form-input">
					<input type="search" placeholder="Search...">
					<button type="submit" class="search-btn"><i class='bx bx-search' > <img src="/img/search1.png" alt="search" height="20px" > </i></button>
				</div>
			</form>
			<input type="checkbox" id="switch-mode" hidden>
			<label for="switch-mode" class="switch-mode"></label>
			<a href="#" class="profile">
				<img id="image" src="../img/avatar.png" alt="Avatar" height="100px"/> 
			</a>
		</nav>
		<!-- NAVBAR -->

		<!-- MAIN -->
		<main>
			<ul class="box-info">
				<li>
					<i class='bx bxs-calendar-check' ><img src="/img/les-17.png" alt="sd" height="60px"></i>
					<span class="text">
						<h3>1020</h3>
						<p>New Order</p>
					</span>
				</li>
				<li>
					<i class='bx bxs-group' ><img src="/img/les-10.png" alt="sd" height="60px"></i>
					<span class="text">
						<h3>2834</h3>
						<p>Visitors</p>
					</span>
				</li>
				<li>
					<i class='bx bxs-dollar-circle' ><img src="/img/les-16.png" alt="sd" height="60px"></i>
					<span class="text">
						<h3>$2543</h3>
						<p>Total Sales</p>
					</span>
				</li>
			</ul>


			<div class="table-data">
				<div class="order">
					<canvas id="profile-chart"></canvas>
				</div>


				{{!-- <div class="todo">
					<div class="head">
						<h3>Todos</h3>
						<i class='bx bx-plus' ></i>
						<i class='bx bx-filter' ></i>
					</div>
					<ul class="todo-list">
						<li class="completed">
							<p>Todo List</p>
							<i class='bx bx-dots-vertical-rounded' ></i>
						</li>
						<li class="completed">
							<p>Todo List</p>
							<i class='bx bx-dots-vertical-rounded' ></i>
						</li>
						<li class="not-completed">
							<p>Todo List</p>
							<i class='bx bx-dots-vertical-rounded' ></i>
						</li>
						<li class="completed">
							<p>Todo List</p>
							<i class='bx bx-dots-vertical-rounded' ></i>
						</li>
						<li class="not-completed">
							<p>Todo List</p>
							<i class='bx bx-dots-vertical-rounded' ></i>
						</li>
					</ul>
				</div> --}}
			</div>
		</main>
		<!-- MAIN -->
	</section>
	<!-- CONTENT -->
   


    <script>
        const avatarUploadInput = document.getElementById("avatar-upload");
        const avatarImg = document.getElementById("avatar");

        avatarUploadInput.addEventListener("change", function() {
            const file = this.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(event) {
                    avatarImg.src = event.target.result;
                }
                reader.readAsDataURL(file);
            }
        });
    </script>

    <script>
        // Функція для отримання даних з локального сховища
        function getResultsData() {
            return JSON.parse(localStorage.getItem("Results")) || [];
        }

        const combinedChartData = {
            labels: [],
            datasets: [
                {
                    label: 'WPM',
                    backgroundColor: "#7e6db3",
                    borderColor: '#7e6db3',
                    cubicInterpolationMode: 'monotone',
                    data: [],
                    yAxisID: 'wpm-axis' // Використовуємо шкалу для WPM
                },
                {
                    label: 'Accuracy (100%)',
                    backgroundColor: "#5f43b2",
                    borderColor: '#5f43b2',
                    cubicInterpolationMode: 'monotone',
                    data: [],
                    yAxisID: 'accuracy-axis' // Використовуємо шкалу для відсотка попадань
                },
                {
                    label: 'Errors',
                    backgroundColor: "#ff0000",
                    borderColor: '#ff0000',
                    cubicInterpolationMode: 'monotone',
                    data: [],
                    yAxisID: 'errors-axis' // Шкала для помилок (якщо потрібно)
                }
            ]
        };

        const combinedChartConfig = {
            type: 'line',
            data: combinedChartData,
            options: {
                plugins: {
                    legend: {
                        display: true,
                        labels: {
                            usePointStyle: true, 
                            pointStyle: 'circle', 
                            radius: 5 
                        }
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        suggestedMin: 0,
                        suggestedMax: 50,
                        stepSize: 5,
                        position: 'right',
                        title: {
                            display: true,
                            text: 'WPM',
                            color: '#7e6db3',
                            font: {
                                size: 14,
                                weight: 'bold'
                            }
                        },
                        id: 'wpm-axis' // ID шкали для WPM
                    },
                    y1: {
                        beginAtZero: true,
                        suggestedMin: 0,
                        suggestedMax: 100,
                        position: 'right',
                        title: {
                            display: true,
                            text: 'Accuracy (100%)',
                            color: '#5f43b2',
                            font: {
                                size: 14,
                                weight: 'bold'
                            }
                        },
                        grid: {
                            drawOnChartArea: false,
                        },
                        id: 'accuracy-axis' // ID шкали для відсотка попадань
                    },
                    y2: {
                        beginAtZero: true,
                        suggestedMin: 0,
                        suggestedMax: 140,
                        stepSize: 20,
                        position: 'right',
                        title: {
                            display: true,
                            text: 'Errors',
                            color: '#ff0000',
                            font: {
                                size: 14,
                                weight: 'bold'
                            }
                        },
                        grid: {
                            drawOnChartArea: false,
                        },
                        id: 'errors-axis' // ID шкали для помилок (якщо потрібно)
                    },
                }
            }
        };

        const combinedChart = new Chart(document.getElementById("profile-chart"), combinedChartConfig);

        // Функція для рендерингу графіка з новими даними
        function renderCombinedChart() {
            const resultsData = getResultsData();
            const labels = [];
            const wpm = [];
            const accuracy = [];
            const errors = [];

            resultsData.forEach((result, index) => {
                labels.push(`Attempt ${index + 1}`);
                wpm.push(result.wpm);
                accuracy.push(result.accuracy);
                errors.push(result.errors);
            });

            combinedChart.data.labels = labels;
            combinedChart.data.datasets[0].data = wpm;
            combinedChart.data.datasets[1].data = accuracy;
            combinedChart.data.datasets[2].data = errors;
            combinedChart.update();
        }

        renderCombinedChart(); // Оновлення графіка з новими даними
    </script>

    <script>
        const allSideMenu = document.querySelectorAll('#sidebar .side-menu.top li a');

allSideMenu.forEach(item=> {
	const li = item.parentElement;

	item.addEventListener('click', function () {
		allSideMenu.forEach(i=> {
			i.parentElement.classList.remove('active');
		})
		li.classList.add('active');
	})
});




// TOGGLE SIDEBAR
const menuBar = document.querySelector('#content nav .bx.bx-menu');
const sidebar = document.getElementById('sidebar');

menuBar.addEventListener('click', function () {
	sidebar.classList.toggle('hide');
})







const searchButton = document.querySelector('#content nav form .form-input button');
const searchButtonIcon = document.querySelector('#content nav form .form-input button .bx');
const searchForm = document.querySelector('#content nav form');

searchButton.addEventListener('click', function (e) {
	if(window.innerWidth < 576) {
		e.preventDefault();
		searchForm.classList.toggle('show');
		if(searchForm.classList.contains('show')) {
			searchButtonIcon.classList.replace('bx-search', 'bx-x');
		} else {
			searchButtonIcon.classList.replace('bx-x', 'bx-search');
		}
	}
})





if(window.innerWidth < 768) {
	sidebar.classList.add('hide');
} else if(window.innerWidth > 576) {
	searchButtonIcon.classList.replace('bx-x', 'bx-search');
	searchForm.classList.remove('show');
}


window.addEventListener('resize', function () {
	if(this.innerWidth > 576) {
		searchButtonIcon.classList.replace('bx-x', 'bx-search');
		searchForm.classList.remove('show');
	}
})



const switchMode = document.getElementById('switch-mode');

switchMode.addEventListener('change', function () {
	if(this.checked) {
		document.body.classList.add('dark');
	} else {
		document.body.classList.remove('dark');
	}
})
    </script>



    <script>


    
        let params = {};
        let regex = /([^&=]+)=([^&]*)/g, m;

        while(m = regex.exec(location.href)){
            params[decodeURIComponent(m[1])] = decodeURIComponent(m[2]);
        }

        if(Object.keys(params).length > 0){
            localStorage.setItem('authInfo', JSON.stringify(params));
        }

        window.history.pushState({}, document.title, "/" + "profile");

        let info = JSON.parse(localStorage.getItem('authInfo'));

       


        let isGoogleAuth = false;
      // Перевірка, чи користувач авторизувався через Google
let authInfo = JSON.parse(localStorage.getItem('authInfo'));

if (authInfo && authInfo['access_token']) {
    isGoogleAuth = true;
}

        if (isGoogleAuth) {
            // Логіка для користувачів, які авторизувалися через Google
            fetch("https://www.googleapis.com/oauth2/v3/userinfo", {
                headers: {
                    "Authorization": `Bearer ${authInfo['access_token']}`
                }
            })
            .then((data) => data.json())
            .then((info) => {
                console.log(info);
                document.getElementById('name').innerHTML += info.name;
            });
        } else {
            
            // Логіка для користувачів, які авторизувалися не через Google
            // Наприклад, отримання даних з сервера або бази даних
            // Ваш код тут...
        }

     

        function goToIndex() {
            window.location.href = '/';
        }

        function logout() {
            localStorage.removeItem('isRegistered');

            

            if (isGoogleAuth) {
                fetch("https://oauth2.googleapis.com/revoke?token=" + authInfo['access_token'], {
                    method: 'POST',
                    headers: {
                        "Content-type": "application/x-www-form-urlencoded"
                    }
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to revoke token');
                    }
                    // Successful token revocation
                    localStorage.removeItem('authInfo'); // Remove authInfo from localStorage
                    location.href = "/"; // Redirect to index.html
                })
                .catch(error => {
                    console.error('Error revoking token:', error);
                    // Handle error as needed, e.g., show an error message to the user
                });
            }
            window.location.href = '/';
        }
        
    </script>
</body>
</html>

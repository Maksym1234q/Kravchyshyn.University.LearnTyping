<!DOCTYPE html>
<html lang="cs">
  <head>
    <meta charset="UTF-8"/>
    <meta name="author" content="David ƒåervenec">
    <meta name="description" content="≈†koln√≠ projekt - JS App | Type test">
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <link rel="icon" href="typer-icon.png" type="image/x-icon">
    <link rel="stylesheet" href="/lessons.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.6.2/chart.min.js" integrity="sha512-tMabqarPtykgDtdtSqCL3uLVM0gS1ZkUAVhRFu1vSEFgvB73niFQWJuvviDyBGBH22Lcau4rHB5p2K2T0Xvr6Q==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Nunito&display=swap" rel="stylesheet">
    <title>Level 16</title>
  </head>
  <body>
    <div id="overlay" class="overlay-visible"></div>
    <main class="app-container">
      <header>
        <h1 class="site-name">Level 16 ‚å®Ô∏è</h1>
        <a href="/lesson" class="nav-button1"><img class="btn-arow1" src="/img/left.png" alt="Your Icon">Back lessons</a>
          <a href="/lesson-17" class="nav-button2"><img class="btn-arow2" src="/img/right.png" alt="Your Icon">Next level 17</a>
      </header>
      <div class="typing-container">
        <div class="statistics-wrapper">
          <div id="current-wpm" class="wpm box">0 <span class="small">WPM</span></div>
          
          <div id="current-time" class="box">00 : 00</div>
          
            <div id="current-errors" class="errors box">0 <span class="small">Errors</span></div>
            
            <div id="current-accuracy" class="accuracy box">0 <span class="small">%</span></div>
            
            <button id="restart-button" class="restart box" aria-label="Quote Reset">
              <img id="restart-icon" src="../img/restart.png" alt="Restart icon" height="30" width="30">
            </button>
          </div>
          
        <p id="qoute-text" class="quote box">Loading text...</p>
          
        <textarea id="input-box" class="input box"></textarea>
        
        <div class="options">
          <div class="options-left">
            <button id="focus-mode" class="option-box" aria-label="Focus Mode">üí°</button>
            <button id="input-mode" class="option-box" aria-label="Input Mode">‚å®Ô∏è</button>
          </div>

          <div class="options-right">
            <button id="timer-10" class="timer option-box" aria-label="Timer 10 seconds">00:10</button>
            <button id="timer-30" class="timer option-box selected" aria-label="Timer 30 seconds">00:30</button>
            <button id="timer-100" class="timer option-box" aria-label="Timer 1 Minute">01:00</button>
            <button id="timer-200" class="timer option-box" aria-label="Timer 2 Minutes">02:00</button>
            <button id="timer-500" class="timer option-box" aria-label="Timer 5 Minutes">05:00</button>
          </div>
        </div>
      </div>

      <div class="results-container">
        <div class="last-result-wrapper">
          <canvas id="chart" height="100" width="200"></canvas>
          
          <table class="table last-result">
            <tr>
              <th>WPM</th>
              <td id="table-wpm">-</td>
            </tr>
            <tr>
              <th>Errors</th>
              <td id="table-errors">-</td>
            </tr>
            <tr>
              <th>Accuracy</th>
              <td id="table-accuracy">-</td>
            </tr>
            <tr>
              <th>Time</th>
              <td id="table-time">-</td>
            </tr>
          </table>
        </div>
        
        <table class="table complete-result">
          <thead>
            <tr>
              <th>WPM</th>
              <th>Errors</th>
              <th>Accuracy</th>
              <th>Time</th>
              <th class="delete-button"><button id="delete-results" aria-label="Delete All Results">‚ùå</button></th>
            </tr>
          </thead>
          <tbody id="results-table"></tbody>
        </table>
      </div>
       <br>
      <h2>Your typing progres</h2>
      <br>
      <br>
    <canvas id="combined-chart"></canvas>
    </main> 




    <script>




      const TimeLimit = {
    time10 : 10,
    time30: 30,
    time100: 60,
    time200: 120,
    time500: 300
}

const Result = function(wpm, errors, accuracy, time) {
    return {
        wpm,
        errors,
        accuracy,
        time
    };
}

const data = {
    labels: [],
    datasets: [
        {
        label: 'WPM',
        backgroundColor: "#7e6db3",
        borderColor: '#7e6db3',
        cubicInterpolationMode: 'monotone',
        data: [],
    },
    {
        label: 'Accuracy',
        backgroundColor: "#5f43b2",
        borderColor: '#5f43b2',
        cubicInterpolationMode: 'monotone',
        data: [],
    }
    ]
};

const config = {
    type: 'line',
    data: data,
    options: {
        plugins: {
            legend: {
                labels: {
                    usePointStyle: true,
                },
                scales: {
                    y: {
                        type: 'linear',
                        display: true,
                        position: 'left',
                    },
                    y1: {
                        type: 'linear',
                        display: true,
                        position: 'right',
                
                        grid: {
                        drawOnChartArea: false,
                        },
                    },
                }
            }
        }
    }
};

const quoteTextElement = document.getElementById("qoute-text");
const inputBoxElement = document.getElementById("input-box");
const currentWPMElement = document.getElementById("current-wpm");
const currentTimeElement = document.getElementById("current-time");
const currentErrorsElement = document.getElementById("current-errors");
const currentAccuracyElement = document.getElementById("current-accuracy");
const restartButtonElement = document.getElementById("restart-button");
const deleteResultsElement = document.getElementById("delete-results");

const resultsData = JSON.parse(localStorage.getItem("Results"));
const resultsTableElement = document.getElementById("results-table");

const focusModeElement = document.getElementById("focus-mode");
const inputModeElement = document.getElementById("input-mode");

const tableWPMElement = document.getElementById("table-wpm");
const tableErrorsElement = document.getElementById("table-errors");
const tableAccuracyElement = document.getElementById("table-accuracy");
const tableTimeElement = document.getElementById("table-time");

let timer = 0;
let selectedTimer = TimeLimit.time30;
let timeRemaining = selectedTimer;
let timeElapsed = 0;
let wordsPerMinute = 0;
let errorsTotal = 0;
let currentAccuracy = 0;
let realCharactersTyped = 0;
let wordsCorrect = 0;
let charactersCorrect = 0;
let degrees = 0;
let resultsArray = resultsData;
let running = false;

let charIndex = 0;
let wordIndex = 0;
let currentIndex = 0;

let chart = new Chart(document.getElementById("chart"), config);


const customWords = [
"p tp p p pt t t p t pt p t p t pt tp t t t tp p t p t pt p t p p p t pt tppt tppt tpt ptp tptp tt pp tp ppt pptptp pt p p t p t pt pp t ptptp tp p p t p pt pt",]
/*function getRandomWords() {
    return fetch("https://api.quotable.io/random?minLength=150&maxLength=200")
        .then(response => response.json())
        .then(data => data.content.toLowerCase());
}*/

async function renderNewWords() {
    const quote = customWords.join(" ");
    quoteTextElement.innerHTML = "";

    for (word of quote.split(" ")) {
        word += " ";
        const quoteWord = document.createElement("span");
        quoteWord.className = "word";
        
        for (character of word) {
            const quoteCharacter = document.createElement("span");
            quoteCharacter.className = "char";
            quoteCharacter.innerText = character;
            quoteWord.appendChild(quoteCharacter);
        }
        quoteTextElement.appendChild(quoteWord);
    }

    inputBoxElement.value = "";
}




const handleText = (e) => {
    running = true;
    
    if (!["Backspace", "Delete"].includes(e.key)) {
        realCharactersTyped++;
    }

    const { currentChar, charArray } = checkChar();
    checkWord();

    currentErrorsElement.innerHTML = `${errorsTotal} <span class="small">Errors</span>`;

    currentAccuracy = ((charactersCorrect / realCharactersTyped ) * 100);
    currentAccuracyElement.innerHTML = `${Math.round(currentAccuracy)} <span class="small">%</span>`;

    if (charIndex === charArray.length - 1) {
        renderNewWords();
        resetIndexes();
    }

    function checkWord() {
        const wordArray = quoteTextElement.querySelectorAll(".word");
        const currentWordElement = quoteTextElement.childNodes[wordIndex];
        const currentWord = wordArray[wordIndex].innerText;

        if (wordIndex === 0) {
            currentIndex = currentWord.length;
        }
        
        if ([" "].includes(e.key) && currentChar != "") {
            e.preventDefault();
            charArray[charIndex].classList.remove("highlight");
            charArray[currentIndex].classList.add("highlight");
            
            const currentInputValue = inputBoxElement.value;
            const nextWordElement = quoteTextElement.childNodes[wordIndex + 1];
            
            if ((currentInputValue + " ") === currentWord) {
                wordsCorrect += currentWord.length;
            } else if (charIndex < currentIndex) {
                currentWordElement.classList.add("incorrect");
                errorsTotal += currentIndex - charIndex;
            }
            
            inputBoxElement.value = "";
            wordIndex++;
            charIndex = currentIndex;
            
            if (nextWordElement) {
                currentIndex += nextWordElement.innerText.length;
            }
        }
    }

    function checkChar() {
        const charArray = quoteTextElement.querySelectorAll(".char");
        const currentChar = inputBoxElement.value.split("");

        charArray[charIndex].classList.remove("highlight");

        if (charArray[charIndex].innerText === e.key) {
            charArray[charIndex].classList.remove("incorrect");
            charArray[charIndex].classList.add("correct");
            charactersCorrect++;

        } else if (charArray[charIndex].innerText != currentChar[charIndex] && e.keyCode != 8) {
            if (!charArray[charIndex].classList.contains("incorrect")) {
                errorsTotal++;
            }
            charArray[charIndex].classList.add("incorrect");
            charArray[charIndex].classList.remove("correct");
        }

        if (["Backspace", "Delete"].includes(e.key) && charIndex > 0 && charArray[charIndex - 1].innerText != " ") {
            charIndex--;
        } else if (!["Backspace", "Delete"].includes(e.key)) {
            charIndex++;
        }

        charArray[charIndex].classList.add("highlight"); 
        
        return { currentChar, charArray };
    }
}

function updateTimer() {
    if (timeRemaining > 0) {
        timeRemaining--;
        timeElapsed++;
        
        let minutes = parseInt(timeRemaining / 60);
        let seconds = parseInt((timeRemaining ) % 60);
        
        minutes = minutes < 10 ? "0" + minutes : minutes;
        seconds = seconds < 10 ? "0" + seconds : seconds;
                
        wordsPerMinute = Math.round((((wordsCorrect / 5) / timeElapsed) * 60));
        
        addDataToChart(chart, timeElapsed, wordsPerMinute, currentAccuracy);

        currentTimeElement.innerText = `${minutes} : ${seconds}`;
        currentWPMElement.innerHTML = `${wordsPerMinute} <span class="small">WPM</span>`;
        
    } else {
        let result = new Result(wordsPerMinute, errorsTotal, currentAccuracy, selectedTimer);
        saveDataToLocalStorage(result);
        renderNewResult(resultsTableElement, resultsData);
        terminateInstance();
        running = false;
    }
}

function addTimer() {
    timer = setInterval(updateTimer, 1000);
    destroyChart();

    tableWPMElement.textContent = "-";
    tableErrorsElement.textContent = "-";
    tableAccuracyElement.textContent = "-";
    tableTimeElement.textContent = "-";
}

function formatTime(time) {
    return time < 60 ? `00 : ${time}` : `0${time / 60} : 00`;
}

function renderTime(time) {
    currentTimeElement.innerText = formatTime(time);
}

function attachListenerToTimers() {
    const timerArray = document.querySelectorAll(".timer");

    for (timer of timerArray) {
        timer.addEventListener("click", (e) => {
            if (running) {
                resetInstance();
            }
            
            switch (e.target.id) {
                case "timer-10": timeRemaining = TimeLimit.time10;
                break;
                case "timer-30": timeRemaining = TimeLimit.time30;
                break;
                case "timer-100": timeRemaining = TimeLimit.time100;
                break;
                case "timer-200": timeRemaining = TimeLimit.time200;
                break;
                case "timer-500": timeRemaining = TimeLimit.time500;
                break;
            }
            
            for (timer of timerArray) {
                timer.classList.remove("selected");
            }
            e.target.classList.add("selected");
            inputBoxElement.focus();
            
            currentTimeElement.classList.add("blink");
            const blink = document.querySelector(".blink");
            blink.addEventListener('animationend', () => {
                currentTimeElement.classList.remove("blink");
            });

            running = false;
            selectedTimer = timeRemaining; 
            currentTimeElement.innerText = formatTime(selectedTimer);
        });
    }
}

function terminateInstance() {  
    resetIndexes();
    clearInterval(timer);
    
    inputBoxElement.addEventListener("keydown", addTimer, {once : true});
    inputBoxElement.style.cursor = "not-allowed";
    inputBoxElement.disabled = true;
    
    currentWPMElement.innerHTML = '0 <span class="small">WPM</span>';
    currentErrorsElement.innerHTML = '0 <span class="small">Errors</span>';
    currentAccuracyElement.innerHTML = '0 <span class="small">%</span>';
    
    timeRemaining = selectedTimer;
    timeElapsed = 0;
    wordsPerMinute = 0;
    errorsTotal = 0;
    wordsCorrect = 0;
    charactersCorrect = 0;
    realCharactersTyped = 0;
    currentAccuracy = 0;
    degrees += 360;
    
    renderTime(timeRemaining);
    const restartIconElement = document.getElementById("restart-icon");
    restartIconElement.style.transform = `rotate(${degrees}deg)`;
}

function resetInstance() {
    renderNewWords();
    terminateInstance();
    inputBoxElement.disabled = false;
    inputBoxElement.style.cursor = "text";
    inputBoxElement.focus();
}

function resetIndexes() {
    charIndex = 0;
    wordIndex = 0;
    currentIndex = 0;
}

// ----------------------- Data handlers ----------------------- //

function saveDataToLocalStorage(data) {
    resultsArray = JSON.parse(localStorage.getItem("Results")) || [];

    resultsArray.push(data);
    localStorage.setItem("Results", JSON.stringify(resultsArray));
}

function addDataToChart(chart, label, data1, data2) {
    chart.data.labels.push(label);
    chart.data.datasets[0].data.push(data1);
    chart.data.datasets[1].data.push(data2);

    chart.update();
}

function removeDataFromChart(chart) {
    for (dataset of chart.data.datasets) {
        dataset.data.length = 0
    }
    chart.data.labels.length = 0;
}

function destroyChart() {
    chart.destroy();
    removeDataFromChart(chart);
    chart = new Chart(document.getElementById("chart"), config);
}

// ----------------------- Data handlers ----------------------- //

// ----------------------- Result handlers ----------------------- //

function renderCompleteResults(table, data) {
    if (data != null) {
        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–∞–π–∫—Ä–∞—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const bestResult = data.reduce((prev, current) => {
            return (prev.wpm > current.wpm) ? prev : current;
        });

        // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –≤—ñ–¥–º—ñ—Ç–∫–∏ –Ω–∞–π–∫—Ä–∞—â–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É, —è–∫—â–æ –≤–æ–Ω–∏ —ñ—Å–Ω—É—é—Ç—å
        const previousBestResultRows = document.querySelectorAll('.best-result');
        previousBestResultRows.forEach(row => row.classList.remove('best-result'));

        // –î–æ–¥–∞—î–º–æ –Ω–∞–π–∫—Ä–∞—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ —Ç–∞–±–ª–∏—Ü—ñ
        const bestResultRow = document.createElement("tr");
        bestResultRow.innerHTML = `<td>${bestResult.wpm}</td>
                                   <td>${bestResult.errors}</td>
                                   <td>${bestResult.accuracy.toFixed(2)} %</td>
                                   <td>${formatTime(bestResult.time)}</td>`;
        table.insertBefore(bestResultRow, table.firstChild);

        // –û–±–≤–æ–¥–∏–º–æ –Ω–∞–π–∫—Ä–∞—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–≤–æ–Ω–æ—é —Ä–∞–º–∫–æ—é
        bestResultRow.classList.add("best-result");

        // –î–æ–¥–∞—î–º–æ —Ä–µ—à—Ç—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        for (result of data) {
            if (result !== bestResult) {
                const resultsRow = document.createElement("tr");
                resultsRow.innerHTML = `<td>${result.wpm}</td>
                                        <td>${result.errors}</td>
                                        <td>${result.accuracy.toFixed(2)} %</td>
                                        <td>${formatTime(result.time)}</td>`;
                table.appendChild(resultsRow);
            }
        }
    }
}





function renderNewResult(table) {
    const resultsData = JSON.parse(localStorage.getItem("Results"));

    if (resultsData != null) {
            const resultsRow = document.createElement("tr");
            resultsRow.innerHTML = `<td>${resultsData.at(-1).wpm}</td>
                                    <td>${resultsData.at(-1).errors}</td>
                                    <td>${resultsData.at(-1).accuracy.toFixed(2)} %</td>
                                    <td>${formatTime(resultsData.at(-1).time)}</td>`;
            table.appendChild(resultsRow);

            tableWPMElement.textContent = resultsData.at(-1).wpm;
            tableErrorsElement.textContent = resultsData.at(-1).errors;
            tableAccuracyElement.textContent = `${resultsData.at(-1).accuracy.toFixed(2)} %`;
            tableTimeElement.textContent = formatTime(resultsData.at(-1).time);
    }
}

function removeResults() {
    localStorage.clear();
    resultsTableElement.innerHTML = "";
}

// ----------------------- Result handlers ----------------------- //

// ----------------------- Listeners ----------------------- //

inputBoxElement.addEventListener("keydown", handleText);
inputBoxElement.addEventListener("keydown", addTimer, {once : true});
restartButtonElement.addEventListener("click", resetInstance);
deleteResultsElement.addEventListener("click", removeResults);

focusModeElement.addEventListener("click", () => {
    focusModeElement.classList.toggle("selected");
    const overlayElement = document.getElementById("overlay");
    overlayElement.classList.toggle("overlay-visible");
    document.body.classList.toggle("scroll-disabled");
    window.scrollTo(0, 0); 
    inputBoxElement.focus();
});

inputModeElement.addEventListener("click", () => {
    inputModeElement.classList.toggle("selected");
    inputBoxElement.classList.toggle("input-visible");
    inputBoxElement.focus();
});

window.addEventListener("keydown", function(e) {
    if(e.key == " " && e.target == document.body) {
        e.preventDefault();
    }
});

// ----------------------- Listeners ----------------------- //

renderTime(timeRemaining);
attachListenerToTimers();
renderNewWords();
renderCompleteResults(resultsTableElement, resultsData);


const combinedChartData = {
        labels: [],
        datasets: [
            {
                label: 'WPM',
                backgroundColor: "#7e6db3",
                borderColor: '#7e6db3',
                cubicInterpolationMode: 'monotone',
                data: [],
                yAxisID: 'wpm-axis' // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —à–∫–∞–ª—É –¥–ª—è WPM
            },
            {
                label: 'Accuracy (100%)',
                backgroundColor: "#5f43b2",
                borderColor: '#5f43b2',
                cubicInterpolationMode: 'monotone',
                data: [],
                yAxisID: 'accuracy-axis' // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —à–∫–∞–ª—É –¥–ª—è –≤—ñ–¥—Å–æ—Ç–∫–∞ –ø–æ–ø–∞–¥–∞–Ω—å
            },
            {
                label: 'Errors',
                backgroundColor: "#ff0000",
                borderColor: '#ff0000',
                cubicInterpolationMode: 'monotone',
                data: [],
                yAxisID: 'errors-axis' // –®–∫–∞–ª–∞ –¥–ª—è –ø–æ–º–∏–ª–æ–∫ (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
            }
        ]
    };

    const combinedChartConfig = {
        type: 'line',
        data: combinedChartData,
        options: {
            plugins: {
                legend: {
                    display: true,
                    labels: {
                    usePointStyle: true, 
                    pointStyle: 'circle', 
                    radius: 5 
                }
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    suggestedMin: 0,
                    suggestedMax: 50,
                    stepSize: 5,
                    position: 'right',
                    title: {
                        display: true,
                        text: 'WPM',
                        color: '#7e6db3',
                        font: {
                            size: 14,
                            weight: 'bold'
                        }
                    },
                    id: 'wpm-axis' // ID —à–∫–∞–ª–∏ –¥–ª—è WPM
                },
                y1: {
                    beginAtZero: true,
                    suggestedMin: 0,
                    suggestedMax: 100,
                    position: 'right',
                    title: {
                        display: true,
                        text: 'Accuracy ( 100 %)',
                        color: '#5f43b2',
                        font: {
                            size: 14,
                            weight: 'bold'
                        }
                    },
                    grid: {
                        drawOnChartArea: false,
                    },
                    id: 'accuracy-axis' // ID —à–∫–∞–ª–∏ –¥–ª—è –≤—ñ–¥—Å–æ—Ç–∫–∞ –ø–æ–ø–∞–¥–∞–Ω—å
                },
                y2: {
                    beginAtZero: true,
                    suggestedMin: 0,
                    suggestedMax: 140,
                    stepSize: 20,
                    position: 'right',
                    title: {
                        display: true,
                        text: 'Errors',
                        color: '#ff0000',
                        font: {
                            size: 14,
                            weight: 'bold'
                        }
                    },
                    grid: {
                        drawOnChartArea: false,
                    },
                    id: 'errors-axis' // ID —à–∫–∞–ª–∏ –¥–ª—è –ø–æ–º–∏–ª–æ–∫ (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
                },
            }
        }
    };

    const combinedChart = new Chart(document.getElementById("combined-chart"), combinedChartConfig);

function renderCombinedChart(data) {
    const labels = [];
    const wpm = [];
    const accuracy = [];
    const errors = [];

    data.forEach((result, index) => {
        labels.push(`Attempt ${index + 1}`);
        wpm.push(result.wpm);
        accuracy.push(result.accuracy);
        errors.push(result.errors);
    });

    combinedChart.data.labels = labels;
    combinedChart.data.datasets[0].data = wpm;
    combinedChart.data.datasets[1].data = accuracy;
    combinedChart.data.datasets[2].data = errors;
    combinedChart.update();
}

renderCombinedChart(resultsArray);


function renderNewResult(table) {
    const resultsData = JSON.parse(localStorage.getItem("Results"));

    if (resultsData != null) {
        const resultsRow = document.createElement("tr");
        resultsRow.innerHTML = `<td>${resultsData.at(-1).wpm}</td>
                                <td>${resultsData.at(-1).errors}</td>
                                <td>${resultsData.at(-1).accuracy.toFixed(2)} %</td>
                                <td>${formatTime(resultsData.at(-1).time)}</td>`;
        table.appendChild(resultsRow);

        tableWPMElement.textContent = resultsData.at(-1).wpm;
        tableErrorsElement.textContent = resultsData.at(-1).errors;
        tableAccuracyElement.textContent = `${resultsData.at(-1).accuracy.toFixed(2)} %`;
        tableTimeElement.textContent = formatTime(resultsData.at(-1).time);

        renderCombinedChart(resultsData); // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞ –∑ –Ω–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏
    }
}
    </script>
  </body>
</html>